// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  typology      Typology[]
  selfType      SelfType?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Typology {
  id            String    @id @default(cuid())
  name          String 
  relationship  String 
  comment       String? 
  createdDate   DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  results       Result[]
}

model SelfType {
  id            String    @id @default(cuid())
  createdDate   DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  results       Result[]
}

model Result {
  id                    String    @id @default(cuid())
  mbtiType              String 
  choices               String[]

  typology              Typology @relation(fields: [typologyId], references: [id])
  typologyId            String
  selfType              SelfType @relation(fields: [selfTypeId], references: [id])
  selfTypeId            String

  cognitiveFunctions    CognitiveFunctions    @relation(fields: [cognitiveId], references: [id], onDelete: Cascade)
  cognitiveId           String
  fourLetters           FourLetters    @relation(fields: [fourLettersId], references: [id], onDelete: Cascade)
  fourLettersId         String
}

model CognitiveFunctions {
  id                    String    @id @default(cuid())
  userResult            Result?
  ne                    Int 
  ni                    Int 
  se                    Int 
  si                    Int 
  te                    Int 
  ti                    Int 
  fe                    Int 
  fi                    Int  
}

model FourLetters {
  id                    String    @id @default(cuid())
  userResult            Result?
  extroversion          Int 
  introversion          Int 
  sensing               Int 
  intuition             Int 
  thinking              Int 
  feeling               Int 
  perceiving            Int 
  judging               Int 
}